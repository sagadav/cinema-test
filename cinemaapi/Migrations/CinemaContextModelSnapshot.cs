// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cinemaapi.Model;

#nullable disable

namespace cinemaapi.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("cinemaapi.Model.Auditorium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("SeatsNo")
                        .HasColumnType("int")
                        .HasColumnName("seats_no");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("auditorium", (string)null);
                });

            modelBuilder.Entity("cinemaapi.Model.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(52)
                        .HasColumnType("varchar(52)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("genre", (string)null);
                });

            modelBuilder.Entity("cinemaapi.Model.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Cast")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cast");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("country");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("director");

                    b.Property<int>("DurationMin")
                        .HasColumnType("int")
                        .HasColumnName("duration_min");

                    b.Property<string>("MovieDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("movie_description");

                    b.Property<byte[]>("Poster")
                        .HasColumnType("longblob")
                        .HasColumnName("poster");

                    b.Property<DateTime>("PremierDate")
                        .HasColumnType("datetime")
                        .HasColumnName("premier_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("movie", (string)null);
                });

            modelBuilder.Entity("cinemaapi.Model.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MovieId" }, "movie_genre_ibfk_1");

                    b.HasIndex(new[] { "GenreId" }, "movie_genre_ibfk_2");

                    b.ToTable("movie_genre", (string)null);
                });

            modelBuilder.Entity("cinemaapi.Model.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("purchase_date");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int")
                        .HasColumnName("screening_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ScreeningId" }, "screening_id");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("reservation", (string)null);
                });

            modelBuilder.Entity("cinemaapi.Model.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int")
                        .HasColumnName("auditorium_id");

                    b.Property<int>("Cost")
                        .HasColumnType("int")
                        .HasColumnName("cost");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<DateTime>("ScreeningStamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("screening_stamp");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AuditoriumId" }, "auditorium_id");

                    b.HasIndex(new[] { "MovieId" }, "screening_ibfk_1");

                    b.ToTable("screening", (string)null);
                });

            modelBuilder.Entity("cinemaapi.Model.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int")
                        .HasColumnName("auditorium_id");

                    b.Property<int>("SeatNum")
                        .HasColumnType("int")
                        .HasColumnName("seat_num");

                    b.Property<int>("SeatRow")
                        .HasColumnType("int")
                        .HasColumnName("seat_row");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AuditoriumId" }, "auditorium_id")
                        .HasDatabaseName("auditorium_id1");

                    b.ToTable("seat", (string)null);
                });

            modelBuilder.Entity("cinemaapi.Model.SeatReserved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int")
                        .HasColumnName("reservation_id");

                    b.Property<int>("SeatId")
                        .HasColumnType("int")
                        .HasColumnName("seat_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ReservationId" }, "reservation_id");

                    b.HasIndex(new[] { "SeatId" }, "seat_id");

                    b.ToTable("seat_reserved", (string)null);
                });

            modelBuilder.Entity("cinemaapi.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Admin','User','Cashier')")
                        .HasColumnName("role")
                        .HasDefaultValueSql("'User'");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email_UNIQUE")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("cinemaapi.Model.MovieGenre", b =>
                {
                    b.HasOne("cinemaapi.Model.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("movie_genre_ibfk_2");

                    b.HasOne("cinemaapi.Model.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("movie_genre_ibfk_1");

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("cinemaapi.Model.Reservation", b =>
                {
                    b.HasOne("cinemaapi.Model.Screening", "Screening")
                        .WithMany("Reservations")
                        .HasForeignKey("ScreeningId")
                        .IsRequired()
                        .HasConstraintName("reservation_ibfk_1");

                    b.HasOne("cinemaapi.Model.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("reservation_ibfk_2");

                    b.Navigation("Screening");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cinemaapi.Model.Screening", b =>
                {
                    b.HasOne("cinemaapi.Model.Auditorium", "Auditorium")
                        .WithMany("Screenings")
                        .HasForeignKey("AuditoriumId")
                        .IsRequired()
                        .HasConstraintName("screening_ibfk_2");

                    b.HasOne("cinemaapi.Model.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("screening_ibfk_1");

                    b.Navigation("Auditorium");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("cinemaapi.Model.Seat", b =>
                {
                    b.HasOne("cinemaapi.Model.Auditorium", "Auditorium")
                        .WithMany("Seats")
                        .HasForeignKey("AuditoriumId")
                        .IsRequired()
                        .HasConstraintName("seat_ibfk_1");

                    b.Navigation("Auditorium");
                });

            modelBuilder.Entity("cinemaapi.Model.SeatReserved", b =>
                {
                    b.HasOne("cinemaapi.Model.Reservation", "Reservation")
                        .WithMany("SeatReserveds")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("seat_reserved_ibfk_2");

                    b.HasOne("cinemaapi.Model.Seat", "Seat")
                        .WithMany("SeatReserveds")
                        .HasForeignKey("SeatId")
                        .IsRequired()
                        .HasConstraintName("seat_reserved_ibfk_1");

                    b.Navigation("Reservation");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("cinemaapi.Model.Auditorium", b =>
                {
                    b.Navigation("Screenings");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("cinemaapi.Model.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("cinemaapi.Model.Movie", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("cinemaapi.Model.Reservation", b =>
                {
                    b.Navigation("SeatReserveds");
                });

            modelBuilder.Entity("cinemaapi.Model.Screening", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("cinemaapi.Model.Seat", b =>
                {
                    b.Navigation("SeatReserveds");
                });

            modelBuilder.Entity("cinemaapi.Model.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
